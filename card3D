<style>
.qcentered {
  display: flex;
  align-items: flex-start;
  justify-content: flex-start;
  gap: 3rem;
  height: auto;
  max-width: 100%;
}

.qcard {
  position: relative;
  height: 28rem;
  width: 20rem;
  aspect-ratio: 5 / 7;
  color: #ffffff;
  perspective: 50rem;
}


.qcard::after,
.qcard::before {
  content: "";
  position: absolute;
  inset: 1.5rem;
  border: #e2c044 0.5rem solid;
  transform: rotateX(var(--rotateX)) rotateY(var(--rotateY)) translate3d(0, 0, 2rem);
}

.qcard::before {
  z-index: 4;
}

.qcard.border-left-behind::before {
  border-left: transparent;
}

.qcard.border-right-behind::before {
  border-right: transparent;
}

.qcard.border-bottom-behind::before {
  border-bottom: transparent;
}

.qshadow {
  position: absolute;
  inset: 0;
  background: var(--url);
  background-size: cover;
  background-position: center;
  opacity: 0.8;
  filter: blur(2rem) saturate(0.9);
  box-shadow: 0 -1.5rem 2rem -0.5rem rgba(0, 0, 0, 0.7);
  transform: rotateX(var(--rotateX)) rotateY(var(--rotateY)) translate3d(0, 2rem, -2rem);
}

.qimage {
  position: absolute;
  inset: 0;
  background: linear-gradient(to top, rgba(0, 0, 0, 0.5), transparent 40%), var(--url);
  background-size: cover;
  background-position: center;
  mask-image: var(--url);
  mask-size: cover;
  mask-position: center;
}

.qimage.background {
  transform: rotateX(var(--rotateX)) rotateY(var(--rotateY)) translate3d(0, 0, 0rem);
}

.qimage.cutout {
  transform: rotateX(var(--rotateX)) rotateY(var(--rotateY)) translate3d(0, 0, 4rem) scale(0.92);
  z-index: 3;
}

.qcontent {
  position: absolute;
  display: flex;
  flex-direction: column;
  justify-content: flex-end;
  inset: 0;
  padding: 3.5rem;
  transform: rotateX(var(--rotateX)) rotateY(var(--rotateY)) translate3d(0, 0, 6rem);
  z-index: 4;
}

h2 {
  font-size: 1.25rem;
  font-weight: 700;
  margin-bottom: 0.5rem;
  text-shadow: 0 0 2rem rgba(0, 0, 0, 0.5);
}

p {
  font-weight: 300;
  text-shadow: 0 0 2rem rgba(0, 0, 0, 0.5);
}

</style>




<script>
const angle = 35;
const rotateCard = window;

const lerp = (start, end, amount) => {
	return (1 - amount) * start + amount * end;
};

const remap = (value, oldMax, newMax) => {
	const newValue = ((value + oldMax) * (newMax * 2)) / (oldMax * 2) - newMax;
	return Math.min(Math.max(newValue, -newMax), newMax);
};

window.addEventListener("DOMContentLoaded", (event) => {
	const cards = document.querySelectorAll(".qcard");
	cards.forEach((e) => {		
		e.addEventListener("mousemove", (event) => {
			const rect = e.getBoundingClientRect();
			const centerX = (rect.left + rect.right) / 2;
			const centerY = (rect.top + rect.bottom) / 2;
			const posX = event.pageX - centerX;
			const posY = event.pageY - centerY;
			const x = remap(posX, rect.width / 2, angle);
			const y = remap(posY, rect.height / 2, angle);
			e.dataset.rotateX = x;
			e.dataset.rotateY = -y;
		});
		
		e.addEventListener("mouseout", (event) => {
			e.dataset.rotateX = 0;
			e.dataset.rotateY = 0;
		});
	});
	
	const update = () => {
		cards.forEach((e) => {
			let currentX = parseFloat(e.style.getPropertyValue('--rotateY').slice(0, -1));
			let currentY = parseFloat(e.style.getPropertyValue('--rotateX').slice(0, -1));
			if (isNaN(currentX)) currentX = 0;
			if (isNaN(currentY)) currentY = 0;
			const x = lerp(currentX, e.dataset.rotateX, 0.05);
			const y = lerp(currentY, e.dataset.rotateY, 0.05);
			e.style.setProperty("--rotateY", x + "deg");
			e.style.setProperty("--rotateX", y + "deg");
		})
	}
	setInterval (update,1000/60)
});


</script>

<div class="widget-container">
	<div class="qcentered">
  <div class="qcard border-left-behind">
    <div class="qshadow" style="--url: url('https://i.ibb.co/PM4ghD4/full.png')"></div>
    <div class="kimage background" style="--url: url('https://i.ibb.co/JpJVJxq/Background.png')"></div>
    <div class="qimage cutout" style="--url: url('https://i.ibb.co/Dw3q3tZ/cutout.png')"></div>
    <div class="qcontent">
      <h2>Hover me!</h2>
      <p>Lorem, ipsum dolor sit amet consectetur adipisicing elit.</p>
    </div>
  </div>
</div>
